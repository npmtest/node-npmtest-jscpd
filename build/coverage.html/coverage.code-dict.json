{"/home/travis/build/npmtest/node-npmtest-jscpd/test.js":"/* istanbul instrument in package npmtest_jscpd */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jscpd/lib.npmtest_jscpd.js":"/* istanbul instrument in package npmtest_jscpd */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_jscpd = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_jscpd = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-jscpd/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-jscpd && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_jscpd */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_jscpd\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_jscpd.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_jscpd.rollup.js'] =\n            local.assetsDict['/assets.npmtest_jscpd.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_jscpd.__dirname + '/lib.npmtest_jscpd.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jscpd/node_modules/jscpd/index.js":"var jscpd = require('./lib/jscpd');\nexports = module.exports = jscpd;\n","/home/travis/build/npmtest/node-npmtest-jscpd/node_modules/jscpd/lib/jscpd.js":"// Generated by CoffeeScript 1.12.2\n(function() {\n  var Detector, JsCpd, Promise, Report, Strategy, debugPreprocessor, filesPreprocessor, logger, optionsPreprocessor;\n\n  logger = require('winston');\n\n  Detector = require('./detector').Detector;\n\n  Strategy = require('./strategy').Strategy;\n\n  Report = require('./report').Report;\n\n  optionsPreprocessor = require('./preprocessors/options');\n\n  filesPreprocessor = require('./preprocessors/files');\n\n  debugPreprocessor = require('./preprocessors/debug');\n\n  Promise = require(\"bluebird\");\n\n  JsCpd = (function() {\n    function JsCpd() {}\n\n    JsCpd.prototype.preProcessors = [optionsPreprocessor, filesPreprocessor, debugPreprocessor];\n\n    JsCpd.prototype.LANGUAGES = [];\n\n    JsCpd.prototype.execPreProcessors = function(list) {\n      var i, len, preProcessor;\n      logger.profile('Preprocessors running time:');\n      for (i = 0, len = list.length; i < len; i++) {\n        preProcessor = list[i];\n        preProcessor(this);\n      }\n      return logger.profile('Preprocessors running time:');\n    };\n\n    JsCpd.prototype.run = function(options) {\n      var clone, codeMap, detector, generateReport, report, strategy;\n      this.options = options;\n      this.execPreProcessors(this.preProcessors);\n      if (!this.options.debug) {\n        logger.profile('Scanning for duplicates time:');\n        if (this.options.selectedFiles.length) {\n          logger.info(\"Scanning \" + this.options.selectedFiles.length + \" files for duplicates...\");\n        }\n        strategy = new Strategy(this.options);\n        detector = new Detector(strategy);\n        report = new Report(this.options);\n        codeMap = detector.start(this.options.selectedFiles, this.options['min-lines'], this.options['min-tokens']);\n        logger.profile('Scanning for duplicates time:');\n        logger.info('Scanning... done!\\n');\n        logger.profile('Generate report time:');\n        logger.info('Start report generation...\\n');\n        generateReport = (function(_this) {\n          return function() {\n            var reportResult;\n            reportResult = report.generate(codeMap);\n            logger.profile('Generate report time:');\n            _this.report = reportResult;\n            _this.map = codeMap;\n            return {\n              report: _this.report,\n              map: _this.map\n            };\n          };\n        })(this);\n        if (this.options.blame) {\n          return Promise.all((function() {\n            var i, len, ref, results;\n            ref = codeMap.clones;\n            results = [];\n            for (i = 0, len = ref.length; i < len; i++) {\n              clone = ref[i];\n              results.push(clone.blame());\n            }\n            return results;\n          })()).then(generateReport).error(generateReport);\n        } else {\n          return generateReport();\n        }\n      }\n    };\n\n    return JsCpd;\n\n  })();\n\n  module.exports = JsCpd;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-jscpd/node_modules/jscpd/lib/detector.js":"// Generated by CoffeeScript 1.12.2\n(function() {\n  var Detector, Map;\n\n  Map = require('./map').Map;\n\n  Detector = (function() {\n    function Detector(strategy) {\n      this.strategy = strategy;\n    }\n\n    Detector.prototype.start = function(files, minLines, minTokens) {\n      var file, i, len, map;\n      if (files == null) {\n        files = [];\n      }\n      if (minLines == null) {\n        minLines = 5;\n      }\n      if (minTokens == null) {\n        minTokens = 70;\n      }\n      map = new Map();\n      for (i = 0, len = files.length; i < len; i++) {\n        file = files[i];\n        this.strategy.detect(map, file, minLines, minTokens);\n      }\n      return map;\n    };\n\n    return Detector;\n\n  })();\n\n  exports.Detector = Detector;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-jscpd/node_modules/jscpd/lib/map.js":"// Generated by CoffeeScript 1.12.2\n(function() {\n  var Map;\n\n  Map = (function() {\n    function Map() {\n      this.clones = [];\n      this.clonesByFile = {};\n      this.numberOfDuplication = 0;\n      this.numberOfLines = 0;\n      this.numberOfFiles = 0;\n    }\n\n    Map.prototype.addClone = function(clone) {\n      this.clones.push(clone);\n      this.numberOfDuplication = this.numberOfDuplication + clone.linesCount;\n      if (clone.firstFile in this.clonesByFile) {\n        this.clonesByFile[clone.firstFile].push(clone.firstFile);\n      } else {\n        this.clonesByFile[clone.firstFile] = [clone.firstFile];\n        this.numberOfFiles++;\n      }\n      if (clone.secondFile in this.clonesByFile) {\n        return this.clonesByFile[clone.secondFile].push(clone);\n      } else {\n        this.clonesByFile[clone.secondFile] = [clone];\n        return this.numberOfFiles++;\n      }\n    };\n\n    Map.prototype.getPercentage = function() {\n      var result;\n      result = 0;\n      if (this.numberOfLines > 0) {\n        result = this.numberOfDuplication / this.numberOfLines * 100;\n      }\n      return result.toFixed(2);\n    };\n\n    return Map;\n\n  })();\n\n  exports.Map = Map;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-jscpd/node_modules/jscpd/lib/strategy.js":"// Generated by CoffeeScript 1.12.2\n(function() {\n  var Clone, Storage, Strategy, TokenizerFactory, crypto, shjs;\n\n  shjs = require('shelljs');\n\n  TokenizerFactory = require('./tokenizer/TokenizerFactory');\n\n  crypto = require('crypto');\n\n  Storage = require('./storage/StorageMemory');\n\n  Clone = require('./clone').Clone;\n\n  Strategy = (function() {\n    function Strategy(options) {\n      this.options = options;\n      this.languages = options.languages;\n      this.storage = new Storage();\n    }\n\n    Strategy.prototype.detect = function(map, file, minLines, minTokens) {\n      var code, currentMap, firstHash, firstLine, firstToken, hash, isClone, language, lastToken, lines, mapFrame, ref, tokenNumber, tokenizer, tokensPositions;\n      this.minLines = minLines;\n      this.minTokens = minTokens;\n      tokenizer = TokenizerFactory.prototype.makeTokenizer(file, this.languages);\n      if (!tokenizer) {\n        return false;\n      }\n      language = tokenizer.getType();\n      if (shjs.test('-f', file)) {\n        code = shjs.cat(file);\n      } else {\n        return false;\n      }\n      lines = code.split('\\n');\n      map.numberOfLines = map.numberOfLines + lines.length;\n      tokenizer.skipComments = this.options['skip-comments'];\n      ref = tokenizer.tokenize(code).generateMap(), tokensPositions = ref.tokensPositions, currentMap = ref.currentMap;\n      firstLine = 0;\n      tokenNumber = 0;\n      isClone = false;\n      while (tokenNumber <= tokensPositions.length - this.minTokens) {\n        mapFrame = currentMap.substring(tokenNumber * 33, tokenNumber * 33 + this.minTokens * 33);\n        hash = crypto.createHash('md5').update(mapFrame).digest('hex');\n        if (this.storage.hasHash(hash, language)) {\n          isClone = true;\n          if (firstLine === 0) {\n            firstLine = tokensPositions[tokenNumber];\n            firstHash = hash;\n            firstToken = tokenNumber;\n          }\n        } else {\n          if (isClone) {\n            lastToken = tokenNumber + this.minTokens - 2;\n            this.addClone(map, file, firstHash, firstToken, lastToken, firstLine, tokensPositions[lastToken], language);\n            firstLine = 0;\n            isClone = false;\n          }\n          this.storage.addHash(hash, file, tokensPositions[tokenNumber], language);\n        }\n        tokenNumber = tokenNumber + 1;\n      }\n      if (isClone) {\n        lastToken = tokenNumber + this.minTokens - 2;\n        this.addClone(map, file, firstHash, firstToken, lastToken, firstLine, tokensPositions[lastToken], language);\n        return isClone = false;\n      }\n    };\n\n    Strategy.prototype.addClone = function(map, file, hash, firstToken, lastToken, firstLine, lastLine, language) {\n      var fileA, firstLineA, hashInfo, numLines;\n      hashInfo = this.storage.getHash(hash, language);\n      fileA = hashInfo.file;\n      firstLineA = hashInfo.line;\n      numLines = lastLine + 1 - firstLine;\n      if (numLines >= this.minLines && (fileA !== file || firstLineA !== firstLine)) {\n        return map.addClone(new Clone(fileA, file, firstLineA, firstLine, numLines, lastToken - firstToken + 1));\n      }\n    };\n\n    return Strategy;\n\n  })();\n\n  exports.Strategy = Strategy;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-jscpd/node_modules/jscpd/lib/tokenizer/TokenizerFactory.js":"// Generated by CoffeeScript 1.12.2\n(function() {\n  var TokenizerCodeMirror, TokenizerFactory,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  TokenizerCodeMirror = require('./TokenizerCodeMirror');\n\n  TokenizerFactory = (function() {\n    function TokenizerFactory() {}\n\n    TokenizerFactory.prototype.tokenizers = {};\n\n    TokenizerFactory.prototype.LANGUAGES = {\n      javascript: ['js', 'es', 'es6'],\n      typescript: ['ts', 'tsx'],\n      jsx: ['jsx'],\n      haxe: ['hx', 'hxml'],\n      coffeescript: ['coffee'],\n      ruby: ['rb'],\n      php: ['php', 'phtml'],\n      python: ['py'],\n      css: ['less', 'css'],\n      sass: ['scss'],\n      java: ['java'],\n      csharp: ['cs'],\n      go: ['go'],\n      clike: ['cpp', 'c', 'm', 'h'],\n      htmlmixed: ['html', 'htm'],\n      yaml: ['yaml', 'yml'],\n      erlang: ['erl', 'erlang'],\n      swift: ['swift'],\n      xml: ['xml', 'xsl', 'xslt'],\n      puppet: ['pp', 'puppet'],\n      twig: ['twig'],\n      vue: ['vue']\n    };\n\n    TokenizerFactory.prototype.getLanguageByExtension = function(extension) {\n      var language;\n      for (language in TokenizerFactory.prototype.LANGUAGES) {\n        if (indexOf.call(TokenizerFactory.prototype.LANGUAGES[language], extension) >= 0) {\n          return language;\n        }\n      }\n      return false;\n    };\n\n    TokenizerFactory.prototype.getExtensionsByLanguages = function(languages) {\n      var language, result;\n      if (typeof languages === 'string') {\n        languages = [languages];\n      }\n      result = [];\n      for (language in TokenizerFactory.prototype.LANGUAGES) {\n        if (indexOf.call(languages, language) >= 0) {\n          result.push.apply(result, TokenizerFactory.prototype.LANGUAGES[language]);\n        }\n      }\n      return result;\n    };\n\n    TokenizerFactory.prototype.makeTokenizer = function(filename, supportedLanguages) {\n      var extension, language, matches, ref;\n      extension = '';\n      matches = filename.match(/\\.(\\w*)$/);\n      if (matches) {\n        extension = (ref = matches[1]) != null ? ref.toLowerCase() : void 0;\n      }\n      language = TokenizerFactory.prototype.getLanguageByExtension(extension);\n      if (indexOf.call(supportedLanguages, language) < 0) {\n        return false;\n      }\n      if (!(language in TokenizerFactory.prototype.tokenizers)) {\n        TokenizerFactory.prototype.tokenizers[language] = new TokenizerCodeMirror();\n        TokenizerFactory.prototype.tokenizers[language].setTypeAndMode(language);\n      }\n      return TokenizerFactory.prototype.tokenizers[language];\n    };\n\n    return TokenizerFactory;\n\n  })();\n\n  module.exports = TokenizerFactory;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-jscpd/node_modules/jscpd/lib/tokenizer/TokenizerCodeMirror.js":"// Generated by CoffeeScript 1.12.2\n(function() {\n  var CodeMirror, TokenizerBase, TokenizerCodeMirror, fs, logger, vm,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  vm = require(\"vm\");\n\n  fs = require(\"fs\");\n\n  TokenizerBase = require('./TokenizerBase');\n\n  logger = require('winston');\n\n  CodeMirror = require(\"codemirror/addon/runmode/runmode.node.js\");\n\n  CodeMirror.loadMode = function(name) {\n    var filename;\n    filename = require.resolve(\"codemirror/mode/\" + name + \"/\" + name + \".js\");\n    return require(filename);\n  };\n\n  TokenizerCodeMirror = (function(superClass) {\n    extend(TokenizerCodeMirror, superClass);\n\n    function TokenizerCodeMirror() {\n      this.tokenize = bind(this.tokenize, this);\n      return TokenizerCodeMirror.__super__.constructor.apply(this, arguments);\n    }\n\n    TokenizerCodeMirror.type = null;\n\n    TokenizerCodeMirror.prototype.setTypeAndMode = function(language) {\n      switch (language) {\n        case \"csharp\":\n        case \"java\":\n          this.type = 'clike';\n          return this.mode = \"text/\" + language;\n        case 'typescript':\n          this.type = 'javascript';\n          return this.mode = \"text/\" + language;\n        case 'jsx':\n          this.type = 'javascript';\n          return this.mode = \"text/javascript\";\n        default:\n          this.type = language;\n          return this.mode = language;\n      }\n    };\n\n    TokenizerCodeMirror.prototype.loadType = function(type) {\n      var e;\n      try {\n        CodeMirror.loadMode(type);\n      } catch (error) {\n        e = error;\n        if (e.code === 'MODULE_NOT_FOUND') {\n          logger.debug(\"\" + e);\n          console.error(\"JSCPD Error 01: \" + type + \" in not supported\");\n        }\n      }\n      return this;\n    };\n\n    TokenizerCodeMirror.prototype.tokenize = function(code) {\n      this.tokens = [];\n      this.loadType(this.type);\n      CodeMirror.runMode(code, this.mode, (function(_this) {\n        return function(value, tokenType, lineNumber) {\n          if (!lineNumber) {\n            return;\n          }\n          tokenType = _this.isEmptyToken(value) ? 'empty' : tokenType;\n          tokenType = tokenType != null ? tokenType : 'default';\n          return _this.tokens.push([tokenType, value, lineNumber]);\n        };\n      })(this));\n      return this;\n    };\n\n    TokenizerCodeMirror.prototype.getType = function() {\n      return this.type;\n    };\n\n    TokenizerCodeMirror.prototype.generateMap = function() {\n      var currentMap, i, len, lineNumber, ref, ref1, tokensPositions, type, value;\n      currentMap = \"\";\n      tokensPositions = [];\n      ref = this.tokens;\n      for (i = 0, len = ref.length; i < len; i++) {\n        ref1 = ref[i], type = ref1[0], value = ref1[1], lineNumber = ref1[2];\n        if (!(this.validToken(type))) {\n          continue;\n        }\n        tokensPositions.push(lineNumber);\n        currentMap = currentMap + this.createMap(type, value);\n      }\n      return {\n        tokensPositions: tokensPositions,\n        currentMap: currentMap\n      };\n    };\n\n    return TokenizerCodeMirror;\n\n  })(TokenizerBase);\n\n  module.exports = TokenizerCodeMirror;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-jscpd/node_modules/jscpd/lib/tokenizer/TokenizerBase.js":"// Generated by CoffeeScript 1.12.2\n(function() {\n  var TokenizerBase, crypto,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  crypto = require('crypto');\n\n  TokenizerBase = (function() {\n    function TokenizerBase() {\n      this.skipComments = false;\n      this.tokenTypes = [];\n    }\n\n    TokenizerBase.prototype.tokenize = function(code) {};\n\n    TokenizerBase.prototype.getType = function() {};\n\n    TokenizerBase.prototype.generateMap = function() {};\n\n    TokenizerBase.prototype.isEmptyToken = function(value) {\n      return value.replace(/^\\s+|\\s+$/g, '').length === 0;\n    };\n\n    TokenizerBase.prototype.validToken = function(type) {\n      var ref;\n      return (((ref = this.type) === 'coffeescript' || ref === 'python' || ref === 'ruby') || type !== 'empty') && (!this.skipComments || type !== 'comment');\n    };\n\n    TokenizerBase.prototype.getTokenTypeId = function(name) {\n      var result;\n      result = 0;\n      if (indexOf.call(this.tokenTypes, name) >= 0) {\n        result = this.tokenTypes.indexOf(name);\n      } else {\n        result = this.tokenTypes.length;\n        this.tokenTypes.push(name);\n      }\n      return result;\n    };\n\n    TokenizerBase.prototype.createMap = function(type, value) {\n      return String.fromCharCode(this.getTokenTypeId(type)) + crypto.createHash('md5').update(value.toString()).digest('hex');\n    };\n\n    return TokenizerBase;\n\n  })();\n\n  module.exports = TokenizerBase;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-jscpd/node_modules/jscpd/lib/storage/StorageMemory.js":"// Generated by CoffeeScript 1.12.2\n(function() {\n  var StorageMemory;\n\n  StorageMemory = (function() {\n    function StorageMemory() {\n      this.codeHashes = {};\n    }\n\n    StorageMemory.prototype.addHash = function(hash, file, line, language) {\n      var ref;\n      this.codeHashes[language] = (ref = this.codeHashes[language]) != null ? ref : {};\n      return this.codeHashes[language][hash] = {\n        line: line,\n        file: file\n      };\n    };\n\n    StorageMemory.prototype.hasHash = function(hash, language) {\n      return this.codeHashes[language] && hash in this.codeHashes[language];\n    };\n\n    StorageMemory.prototype.getHash = function(hash, language) {\n      var ref;\n      return (ref = this.codeHashes[language]) != null ? ref[hash] : void 0;\n    };\n\n    return StorageMemory;\n\n  })();\n\n  module.exports = StorageMemory;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-jscpd/node_modules/jscpd/lib/clone.js":"// Generated by CoffeeScript 1.12.2\n(function() {\n  var Blamer, Clone, Promise, shjs;\n\n  shjs = require('shelljs');\n\n  Blamer = require('blamer');\n\n  Promise = require('bluebird');\n\n  Clone = (function() {\n    function Clone(firstFile, secondFile, firstFileStart, secondFileStart, linesCount, tokensCount) {\n      this.firstFile = firstFile;\n      this.secondFile = secondFile;\n      this.firstFileStart = firstFileStart;\n      this.secondFileStart = secondFileStart;\n      this.linesCount = linesCount;\n      this.tokensCount = tokensCount;\n      this.firstFileAnnotatedCode = {};\n      this.secondFileAnnotatedCode = {};\n    }\n\n    Clone.prototype.getLines = function(isFirstFile) {\n      var code, end, lines, start;\n      if (isFirstFile == null) {\n        isFirstFile = true;\n      }\n      code = shjs.cat(isFirstFile ? this.firstFile : this.secondFile);\n      start = isFirstFile ? this.firstFileStart : this.secondFileStart;\n      lines = code.split('\\n');\n      end = start + this.linesCount;\n      return lines.slice(start, +end + 1 || 9e9).join(\"\\n\");\n    };\n\n    Clone.prototype.blame = function() {\n      var blamer;\n      blamer = new Blamer;\n      return Promise.all([blamer.blameByFile(this.firstFile), blamer.blameByFile(this.secondFile)]).then((function(_this) {\n        return function(results) {\n          var annotation, line, ref, ref1;\n          ref = results[0][_this.firstFile];\n          for (line in ref) {\n            annotation = ref[line];\n            if (_this.lineInRange(line, _this.firstFileStart)) {\n              _this.firstFileAnnotatedCode[line] = annotation;\n            }\n          }\n          ref1 = results[1][_this.secondFile];\n          for (line in ref1) {\n            annotation = ref1[line];\n            if (_this.lineInRange(line, _this.secondFileStart)) {\n              _this.secondFileAnnotatedCode[line] = annotation;\n            }\n          }\n          return _this;\n        };\n      })(this));\n    };\n\n    Clone.prototype.lineInRange = function(line, fileStart) {\n      return 0 + line >= fileStart && 0 + line <= fileStart + this.linesCount;\n    };\n\n    return Clone;\n\n  })();\n\n  exports.Clone = Clone;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-jscpd/node_modules/jscpd/lib/report.js":"// Generated by CoffeeScript 1.12.2\n(function() {\n  var Report, fs, logger, path;\n\n  fs = require('fs');\n\n  logger = require('winston');\n\n  path = require('path');\n\n  Report = (function() {\n    function Report(options) {\n      var cwd, ext, isAbsolute, reporter;\n      this.options = options;\n      reporter = this.options.reporter;\n      if (this.options.output) {\n        ext = this.options.output.split('.').pop();\n      }\n      if (ext === 'xml' && reporter === 'json' || ext === 'json' && reporter === 'xml') {\n        logger.warn(\"output file extention '\" + this.options.output + \"' does not match reporter '\" + reporter + \"'\");\n      }\n      switch (reporter) {\n        case 'xml':\n          reporter = './reporters/xml-pmd';\n          break;\n        case 'json':\n          reporter = './reporters/json';\n          break;\n        default:\n          cwd = process.cwd();\n          reporter = path.normalize(reporter);\n          isAbsolute = reporter.indexOf(cwd) === 0;\n          if (!isAbsolute) {\n            reporter = path.join(cwd, reporter);\n          }\n      }\n      this.reporter = require(reporter);\n      this.stdReporter = require('./reporters/_std-log');\n    }\n\n    Report.prototype.generate = function(map) {\n      var dump, log, raw, ref;\n      this.map = map;\n      ref = this.reporter(this.options), raw = ref[0], dump = ref[1], log = ref[2];\n      if (!log) {\n        log = this.stdReporter();\n      }\n      logger.info(log);\n      if (this.options.output) {\n        fs.writeFileSync(this.options.output, dump || raw);\n      } else {\n        logger.warn('output file is not provided');\n      }\n      return raw || dump;\n    };\n\n    return Report;\n\n  })();\n\n  exports.Report = Report;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-jscpd/node_modules/jscpd/lib/preprocessors/options.js":"// Generated by CoffeeScript 1.12.2\n(function() {\n  var TokenizerFactory, _, fs, optionsPreprocessor, parseLanguagesExtensions, path, prepareOptions, readConfig, yaml,\n    hasProp = {}.hasOwnProperty;\n\n  _ = require(\"underscore\");\n\n  yaml = require('js-yaml');\n\n  fs = require('fs');\n\n  path = require('path');\n\n  TokenizerFactory = require('../tokenizer/TokenizerFactory');\n\n  prepareOptions = function(options, config) {\n    var exts, key, lang, optionsNew, ref, value;\n    optionsNew = _.extend(optionsPreprocessor[\"default\"], config);\n    for (key in options) {\n      value = options[key];\n      if (!(value === null)) {\n        optionsNew[key] = value;\n      }\n    }\n    if (optionsNew.hasOwnProperty('languages-exts')) {\n      if (typeof optionsNew['languages-exts'] === 'string') {\n        optionsNew['languages-exts'] = parseLanguagesExtensions(optionsNew['languages-exts']);\n      }\n      ref = optionsNew['languages-exts'];\n      for (lang in ref) {\n        if (!hasProp.call(ref, lang)) continue;\n        exts = ref[lang];\n        if (TokenizerFactory.prototype.LANGUAGES.hasOwnProperty(lang)) {\n          TokenizerFactory.prototype.LANGUAGES[lang] = exts;\n        }\n      }\n    }\n    if (typeof optionsNew.languages === 'string') {\n      optionsNew.languages = optionsNew.languages.split(',');\n    }\n    optionsNew.extensions = TokenizerFactory.prototype.getExtensionsByLanguages(optionsNew.languages);\n    return optionsNew;\n  };\n\n  readConfig = function(file) {\n    var doc, error;\n    file = path.normalize(file);\n    try {\n      doc = yaml.safeLoad(fs.readFileSync(file, 'utf8'));\n      doc.config_file = file;\n      return doc;\n    } catch (error1) {\n      error = error1;\n      return false;\n    }\n  };\n\n  parseLanguagesExtensions = function(extensions) {\n    var result;\n    result = {};\n    extensions.split(';').forEach(function(language) {\n      var pair;\n      pair = language.split(':');\n      return result[pair[0]] = pair[1].split(',');\n    });\n    return result;\n  };\n\n  optionsPreprocessor = function(jscpd) {\n    var config, options;\n    if (jscpd.options.config != null) {\n      config = readConfig(jscpd.options.config);\n      if (!config) {\n        throw new Error(\"JSCPD Error 02: can't read config file \" + jscpd.options.config);\n      }\n      process.chdir(path.dirname(jscpd.options.config));\n    } else {\n      config = readConfig('.cpd.yaml') || readConfig('.cpd.yml') || {};\n    }\n    options = prepareOptions(jscpd.options, config);\n    if (!path.isAbsolute(options.path || '')) {\n      options.path = path.resolve(process.cwd(), options.path || '');\n    }\n    return jscpd.options = options;\n  };\n\n  optionsPreprocessor[\"default\"] = {\n    languages: Object.keys(TokenizerFactory.prototype.LANGUAGES),\n    verbose: false,\n    debug: false,\n    files: null,\n    exclude: null,\n    \"min-lines\": 5,\n    \"min-tokens\": 70,\n    limit: 50,\n    reporter: \"xml\"\n  };\n\n  module.exports = optionsPreprocessor;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-jscpd/node_modules/jscpd/lib/preprocessors/files.js":"// Generated by CoffeeScript 1.12.2\n(function() {\n  var _, filesPreprocessor, findFiles, glob, path, prepareOptions;\n\n  _ = require(\"underscore\");\n\n  path = require(\"path\");\n\n  glob = require(\"glob\");\n\n  findFiles = function(jscpd) {\n    var excluded_files, files, i, j, len, len1, pattern, ref, ref1;\n    files = [];\n    excluded_files = [];\n    ref = jscpd.options.patterns;\n    for (i = 0, len = ref.length; i < len; i++) {\n      pattern = ref[i];\n      files = _.union(files, glob.sync(pattern, {\n        cwd: jscpd.options.path\n      }));\n    }\n    if (jscpd.options.exclude && jscpd.options.exclude.length > 0) {\n      ref1 = jscpd.options.exclude;\n      for (j = 0, len1 = ref1.length; j < len1; j++) {\n        pattern = ref1[j];\n        excluded_files = _.union(excluded_files, glob.sync(pattern, {\n          cwd: jscpd.options.path\n        }));\n      }\n    }\n    files = _.difference(files, excluded_files);\n    files = _.map(files, function(file) {\n      return path.normalize(jscpd.options.path + \"/\" + file);\n    });\n    return files;\n  };\n\n  prepareOptions = function(jscpd) {\n    if (jscpd.options.files === null) {\n      jscpd.options.patterns = [\"**/*.+(\" + (jscpd.options.extensions.join('|')) + \")\"];\n    } else {\n      if (!Array.isArray(jscpd.options.files)) {\n        jscpd.options.patterns = [jscpd.options.files];\n      } else {\n        jscpd.options.patterns = jscpd.options.files;\n      }\n    }\n    if (jscpd.options.exclude !== null) {\n      if (!Array.isArray(jscpd.options.exclude)) {\n        return jscpd.options.exclude = [jscpd.options.exclude];\n      }\n    }\n  };\n\n  filesPreprocessor = function(jscpd) {\n    prepareOptions(jscpd);\n    return jscpd.options.selectedFiles = findFiles(jscpd);\n  };\n\n  module.exports = filesPreprocessor;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-jscpd/node_modules/jscpd/lib/preprocessors/debug.js":"// Generated by CoffeeScript 1.12.2\n(function() {\n  var debugPreprocessor, logger;\n\n  logger = require(\"winston\");\n\n  debugPreprocessor = function(jscpd) {\n    var file, i, len, name, option, ref, ref1;\n    if (jscpd.options.debug) {\n      logger.info('----------------------------------------');\n      logger.info('Options:');\n      ref = jscpd.options;\n      for (name in ref) {\n        option = ref[name];\n        if (name !== 'selectedFiles') {\n          logger.info(name + \" = \" + option);\n        }\n      }\n      logger.info('----------------------------------------');\n      logger.info('Files:');\n      ref1 = jscpd.options.selectedFiles;\n      for (i = 0, len = ref1.length; i < len; i++) {\n        file = ref1[i];\n        logger.info(file);\n      }\n      logger.info('----------------------------------------');\n      return logger.info('Run without debug option for start detection process');\n    }\n  };\n\n  module.exports = debugPreprocessor;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-jscpd/node_modules/jscpd/lib/cli/cli.js":"// Generated by CoffeeScript 1.12.2\n(function() {\n  var JsCpd, cli, logger, path;\n\n  logger = require('winston');\n\n  cli = require(\"cli\").enable(\"help\", \"version\");\n\n  path = require(\"path\");\n\n  JsCpd = require(\"./../jscpd\");\n\n  logger.cli();\n\n  cli.setUsage(\"jscpd [OPTIONS]\");\n\n  cli.setApp(path.resolve(__dirname + \"/../../package.json\"));\n\n  cli.parse({\n    \"min-lines\": ['l', \"min size of duplication in code lines\", \"number\"],\n    \"min-tokens\": ['t', \"mim size of duplication in code tokens\", \"number\"],\n    \"config\": ['c', \"path to config file\", \"file\"],\n    \"files\": ['f', \"glob pattern for find code\", \"string\"],\n    \"exclude\": ['e', \"directory to ignore\", \"string\"],\n    \"skip-comments\": [false, \"skip comments in code\"],\n    \"blame\": ['b', \"blame authors of duplications (get information about authors from git)\", \"boolean\"],\n    \"languages-exts\": [false, \"list of languages with file extensions (language:ext1,ext2;language:ext3)\", \"string\"],\n    \"languages\": ['g', \"list of languages which scan for duplicates, separated with comma\", \"string\"],\n    \"output\": ['o', \"path to report file\", \"path\"],\n    \"reporter\": ['r', \"reporter to use\", \"string\"],\n    \"xsl-href\": ['x', \"path to xsl for include to xml report\", \"string\"],\n    \"verbose\": [false, \"show full info about copies\"],\n    \"debug\": ['d', \"show debug information(options list and selected files)\"],\n    \"path\": ['p', \"path to code\", \"path\"],\n    \"limit\": [false, 'limit of allowed duplications, if real duplications percent more then limit jscpd exit with error', \"number\"]\n  });\n\n  cli.main(function(args, options) {\n    var jscpd;\n    jscpd = new JsCpd;\n    logger.profile(\"All time:\");\n    logger.info(\"jscpd - copy/paste detector for programming source code, developed by Andrey Kucherenko\");\n    jscpd.run(options);\n    return logger.profile(\"All time:\");\n  });\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-jscpd/node_modules/jscpd/lib/reporters/xml-pmd.js":"// Generated by CoffeeScript 1.12.2\n(function() {\n  var Promise, _;\n\n  _ = require('underscore');\n\n  Promise = require('bluebird');\n\n  module.exports = function(options) {\n    var clone, fn, i, len, ref, xmlDoc;\n    xmlDoc = \"<?xml version='1.0' encoding='UTF-8' ?>\";\n    if (options['xsl-href']) {\n      xmlDoc += '<?xml-stylesheet type=\"text/xsl\" href=\"' + options['xsl-href'] + '\"?>';\n    }\n    xmlDoc += '<pmd-cpd>';\n    ref = this.map.clones;\n    fn = function(clone) {\n      var firstFragment, secondFragment;\n      firstFragment = _.escape(clone.getLines(true));\n      secondFragment = _.escape(clone.getLines(false));\n      return xmlDoc = xmlDoc + \" <duplication lines='\" + clone.linesCount + \"' tokens='\" + clone.tokensCount + \"'> <file path='\" + clone.firstFile + \"' line='\" + clone.firstFileStart + \"'>\" + clone.firstFileAnnotatedCode + \" <codefragment><![CDATA[\" + firstFragment + \"]]></codefragment> </file> <file path='\" + clone.secondFile + \"' line='\" + clone.secondFileStart + \"'>\" + clone.secondFileAnnotatedCode + \" <codefragment><![CDATA[\" + secondFragment + \"]]></codefragment> </file> <codefragment><![CDATA[\" + firstFragment + \"]]></codefragment> </duplication>\";\n    };\n    for (i = 0, len = ref.length; i < len; i++) {\n      clone = ref[i];\n      fn(clone);\n    }\n    xmlDoc = xmlDoc + '</pmd-cpd>';\n    return [xmlDoc];\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-jscpd/node_modules/jscpd/lib/reporters/_std-log.js":"// Generated by CoffeeScript 1.12.2\n(function() {\n  var TABLE_CONFIGURATION, Table, compareDates;\n\n  require('colors');\n\n  Table = require('cli-table');\n\n  TABLE_CONFIGURATION = {\n    chars: {\n      'mid': '',\n      'left-mid': '',\n      'mid-mid': '',\n      'right-mid': '',\n      'top': '',\n      'top-mid': '',\n      'top-left': '',\n      'top-right': '',\n      'bottom': '',\n      'bottom-mid': '',\n      'bottom-left': '',\n      'bottom-right': '',\n      'left': '',\n      'right': ''\n    }\n  };\n\n  compareDates = function(firstDate, secondDate) {\n    firstDate = new Date(firstDate);\n    secondDate = new Date(secondDate);\n    switch (true) {\n      case firstDate < secondDate:\n        return \"=>\";\n      case firstDate > secondDate:\n        return \"<=\";\n      default:\n        return \"==\";\n    }\n  };\n\n  module.exports = function() {\n    var clog, clone, fn, i, len, log, percent, ref, verbose;\n    clog = '';\n    verbose = this.options.verbose || this.options.blame;\n    ref = this.map.clones;\n    fn = function(clone) {\n      var firstFile, fragment, secondFile, table;\n      table = new Table(TABLE_CONFIGURATION);\n      firstFile = clone.firstFile;\n      secondFile = clone.secondFile;\n      if (verbose) {\n        fragment = clone.getLines().split(\"\\n\").reduce(function(tbl, current, lineNumber) {\n          var firstFileLine, secondFileLine;\n          firstFileLine = clone.firstFileStart + lineNumber;\n          secondFileLine = clone.secondFileStart + lineNumber;\n          if (Object.keys(clone.firstFileAnnotatedCode).length > 0) {\n            tbl.push([firstFileLine, clone.firstFileAnnotatedCode[firstFileLine].author, compareDates(clone.firstFileAnnotatedCode[firstFileLine].date, clone.secondFileAnnotatedCode[secondFileLine].date), secondFileLine, clone.secondFileAnnotatedCode[secondFileLine].author, current.dim]);\n          } else {\n            tbl.push([firstFileLine, secondFileLine, current.dim]);\n          }\n          return tbl;\n        }, table);\n      }\n      clog = clog + \"\\n\\t- \" + firstFile.green.bold + \": \" + clone.firstFileStart + \"-\" + (clone.firstFileStart + clone.linesCount) + \"\\n\\t \" + secondFile.green.bold + \": \" + clone.secondFileStart + \"-\" + (clone.secondFileStart + clone.linesCount) + \"\\n\";\n      if (verbose) {\n        return clog = clog + \"\\n\" + (fragment.toString()) + \"\\n\";\n      }\n    };\n    for (i = 0, len = ref.length; i < len; i++) {\n      clone = ref[i];\n      fn(clone);\n    }\n    percent = this.map.getPercentage();\n    log = \"Found \" + this.map.clones.length + \" exact clones with \" + this.map.numberOfDuplication + \" duplicated lines in \" + this.map.numberOfFiles + \" files\\n \" + clog + \"\\n\\n \" + percent + \"% (\" + this.map.numberOfDuplication + \" lines) duplicated lines out of \" + this.map.numberOfLines + \" total lines of code.\\n\";\n    if (this.options.limit <= percent && percent !== \"0.00\") {\n      console.error(log);\n      console.error(\"ERROR: jscpd found too many duplicates over threshold\");\n      process.exit(1);\n    }\n    return log;\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-jscpd/node_modules/jscpd/lib/reporters/json.js":"// Generated by CoffeeScript 1.12.2\n(function() {\n  var _;\n\n  _ = require('underscore');\n\n  module.exports = function() {\n    var clone, duplicates, fn, i, json, len, ref;\n    duplicates = [];\n    ref = this.map.clones;\n    fn = function(clone) {\n      return duplicates.push({\n        lines: clone.linesCount,\n        tokens: clone.tokensCount,\n        firstFile: {\n          start: clone.firstFileStart,\n          name: clone.firstFile\n        },\n        secondFile: {\n          start: clone.secondFileStart,\n          name: clone.secondFile\n        },\n        fragment: _.escape(clone.getLines())\n      });\n    };\n    for (i = 0, len = ref.length; i < len; i++) {\n      clone = ref[i];\n      fn(clone);\n    }\n    json = {\n      duplicates: duplicates,\n      statistics: {\n        clones: this.map.clones.length,\n        duplications: this.map.numberOfDuplication,\n        files: this.map.numberOfFiles,\n        percentage: this.map.getPercentage(),\n        lines: this.map.numberOfLines\n      }\n    };\n    return [json, JSON.stringify(json)];\n  };\n\n}).call(this);\n"}